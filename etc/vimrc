" ------------------------------------------------------------------------------
" .vimrc - Vim startup script.
" ------------------------------------------------------------------------------
"
" Helpful commands:
"
"   :set termcap                          " to see terminal codes
"   :he group-name
"   :he highlight-groups
"   :he cterm-colors
"   :set guifont=*                        " brings up a dialog
"
"   lcd %:p:h           " cd to the current file's path
" ------------------------------------------------------------------------------
"
" Enable loading filetype and indentation plugins
filetype plugin on
filetype indent on

" ------------------------------------------------------------------------------
" Completion
"   :help ins-completion
"   http://www.vim.org/tips/tip.php?tip_id=1386
" ------------------------------------------------------------------------------
  set completeopt=menu,longest,preview

  " When menu is visible, use <tab> to commit the selection
  inoremap <expr> <tab> pumvisible() ? "<c-y>" : "\<c-g>u\<tab>"
  inoremap <expr> <c-n> pumvisible() ? "<c-n>" : "\<lt>c-n>\<lt>c-r>=pumvisible() ? \"\\<lt>down>\" : \"\"\<lt>cr>"

  " When menu is visible, use <cr> to commit the select, and bring up the next
  " menu
  inoremap <expr> <c-f> pumvisible() ? "<c-f>" : "\<lt>c-x>\<lt>c-f>\<lt>c-r>=pumvisible() ? \"\\<lt>down>\" : \"\"\<lt>cr>"
  inoremap <expr> <cr> pumvisible() ? "<c-y><c-x><c-f><c-r>=pumvisible() ? \"\\<lt>down>\" : \"\"\<lt>cr>" : "\<c-g>u\<cr>"
" ------------------------------------------------------------------------------

" Use UTF-8 as the default buffer encoding
set enc=utf-8

" Remember up to 100 'colon' commmands and search patterns
set history=100

" Jump to matching bracket for 2/10th of a second (works with showmatch)
set matchtime=2

" Use F10 to toggle 'paste' mode
set pastetoggle=<C-o>

" ------------------------------------------------------------------------------
" Printing
" ------------------------------------------------------------------------------

  set printoptions=paper:letter,duplex:off,formfeed:n
  set printfont=Monospace\ 9

" ------------------------------------------------------------------------------
" General settings
" ------------------------------------------------------------------------------

  set tags=./.tags,~/.tags              " tag file order
  set nofoldenable                      " code folding (:help fold.txt)
"  colorscheme desert256
  set t_Co=256
  set nobackup                          " use backups?
  set noeb                              " error bell
  set novb                              " visual bell
  set vb t_vb=                          " disable visual bell
  set hls
  set ru
  set vb
  set expandtab
  set tabstop=4
  set sts=4
  set shiftwidth=4
  set autoindent
  set nowrap
  set sb
  set ai
  set nodigraph
  set aw
  set noic
  set nolist
  set magic
  set nu
  set remap
  set showmatch
  set noterse
  set timeout
  set ws
  set nowa
  set ruler
  set incsearch                       " search as i type
  set cpo-=<                          " Use full <> options
  " Scroll when cursor gets within 3 characters of top/bottom edge
  set scrolloff=3
  " Round indent to multiple of 'shiftwidth' for > and < commands
  set shiftround
  " Write swap file to disk after every 50 characters
  set updatecount=50
  set pastetoggle=<C-o>

" ------------------------------------------------------------------------------
" Local settings
" ------------------------------------------------------------------------------

  set shell=/bin/bash                 " shell for ! commands
  set shellcmdflag=-c                 " for ! commands (-c is default)
  set bg=dark                         " background is: light or dark
  set bdir=~/tmp                      " backup directory
  set dir=~/tmp                       " swap file directory
  set ff=dos
  set cursorline  				      " highlight current line
" ------------------------------------------------------------------------------
" Make vim turn *off* expandtab for files named Makefile or makefile
" We need the tab literal
" ------------------------------------------------------------------------------

  autocmd BufNewFile,BufRead [Mm]akefile* set noexpandtab

" ------------------------------------------------------------------------------
" Maps
" ------------------------------------------------------------------------------

" paste/yank/cut
  nmap <C-p> "+p
  nmap <S-y> "+y
  nmap <C-x> "+d

" toggle this and last buffer
  nmap <BS> :e#<CR>

  " Delete whitespace at end of lines
"  map <C-S-W> :%s/\s\+$//<CR>

  " Global search and replace
  map <C-n> :%s/

  " Highlight lines longer than 80 chars
  map <C-S-E> /\%>80v.\+<CR>

  map <F9> /[^ -~]<CR>
  " Open our clipboard
  map <F12> <ESC>:e ~/.clip<CR>

  " SCROLL: left
  map <C-H> zh

  " SCROLL: right
  map <C-L> zl

  " Reformat a line (no tabs please) to 80 columns
  map <C-F> 080lF a0

  " Single-quote the current word (cursor has to be at beginning of word)
  map <Leader>q i'<Esc>ea'<Esc>F'

  " Double-quote the current word (cursor has to be at beginning of word)
  map <Leader>Q i"<Esc>ea"<Esc>F"

  " Repeat the last ex command
  map <Leader>g :OA<Cr>

  " Search for livesite variables
  map <Leader>v /\[#.*\]<Cr>

  " Indent curly block
  map <Leader>S 0mxk$%k^>`x

  " Un-indent curly block
  map <Leader>s 0mxk$%k^<`x

  " Delete line and move down
  map <Leader>d dd}

  " Go to tab 1-5
  map <Leader>1 1gt
  map <Leader>2 2gt
  map <Leader>3 3gt
  map <Leader>4 4gt
  map <Leader>5 5gt
  map <Leader>b i<Cr><Esc>

  " tab navigation like firefox
  "nmap <tab> :tabnext<Cr>
  "nmap <S-tab> :tabprevious<CR>
  map <Tab> gt
  map <S-Tab> gT

  " Make Ogre Application
  map <Leader>mo :!make && cp ./OgreApp ./dist/bin/OgreApp<CR>

  " Execute Ogre Application
  map <Leader>eo :!cd dist/bin && ./OgreApp && cd ../../<CR>

" ------------------------------------------------------------------------------
" Automatically set screen title
" ------------------------------------------------------------------------------

autocmd BufEnter * let &titlestring = expand("%:t")
if &term == "screen"
  set t_ts=k
  set t_fs=\
endif
if &term == "screen" || &term == "xterm"
  set title
endif


"autocmd BufWriteCmd *.js,*.jsm :call CompileJS()
"function! CompileJS()
"    if &modified
"        write
"        execute "!diff /dev/null <(/usr/lib/xulrunner-1.9.2/xpcshell -Cv180 % |& grep .)"
"    endif
"endfunction

" makes * and # work on visual mode too.
function! s:VSetSearch()
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, '\'), '\n', '\\n', 'g')
  let @s = temp
endfunction

vmap * :<C-u>call <SID>VSetSearch()<CR>//<CR>
vmap # :<C-u>call <SID>VSetSearch()<CR>??<CR>

" recursively vimgrep for word under cursor or selection if you hit leader-star
nmap <leader>* :execute 'noautocmd vimgrep /\V' . substitute(escape(expand("<cword>"), '\'), '\n', '\\n', 'g') . '/ **'<CR>
vmap <leader>* :<C-u>call <SID>VSetSearch()<CR>:execute 'noautocmd vimgrep /' . @/ . '/ **'<CR>

" ------------------------------------------------------------------------------
" closure compiler setup
" ------------------------------------------------------------------------------

"if exists("current_compiler")
"    finish
"endif

"let current_compiler = "closure"

"if exists(":CompilerSet") != 2
"    " older Vim always used :setlocal
"    command -nargs=* CompilerSet setlocal <args>
"endif

"CompilerSet makeprg=java\ -jar\ /home/jared/sources/closure/compiler.jar\ --js_output_file=%<.min.js\ --js\ %
"CompilerSet errorformat=%E%f:%l:\ %m,%-Z%p^,%-C%.%#,%-G%.%#
"


" ------------------------------------------------------------------------------
" Vundle Setup
" ------------------------------------------------------------------------------

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

set nocompatible
filetype off
filetype plugin indent on

set nocompatible               " be iMproved
filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" ------------------------------------------------------------------------------
" Vundle Bundles
" ------------------------------------------------------------------------------

" required!
Bundle 'gmarik/vundle'

Bundle 'joonty/vim-phpqa.git'
Bundle 'davidhalter/jedi-vim.git'
Bundle 'shawncplus/phpcomplete.vim.git'
Bundle 'ervandew/supertab.git'
" nerdcommenter causes a mapping conflict.
" Bundle 'scrooloose/nerdcommenter.git'
" tested this but didn't decide if I like it.
"Bundle 'vim-php/phptags.git'
Bundle 'majutsushi/tagbar.git'
Bundle 'mileszs/ack.vim.git'
Bundle 'vim-scripts/c.vim.git'
Bundle 'vim-scripts/CRefVim.git'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'vimoutliner/vimoutliner'
Bundle 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}

" ------------------------------------------------------------------------------
" EasyMotion Setup
" ------------------------------------------------------------------------------

let g:EasyMotion_leader_key = '<Leader>'

nmap <F8> :TagbarToggle<CR>

augroup vimrc_autocmds
    autocmd!
    " highlight characters past column 120
    autocmd FileType python highlight Excess ctermbg=DarkGrey guibg=Black
    autocmd FileType python match Excess /\%120v.*/
    autocmd FileType python set nowrap
augroup END

" ------------------------------------------------------------------------------
" Powerline setup
" ------------------------------------------------------------------------------

set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 9
set laststatus=2

" Python-mode
" Inactivate rope
" Keys:
" K             Show python docs
" <Ctrl-c>g     Rope goto definition
" <Ctrl-c>d     Rope show documentation
" <Ctrl-c>f     Rope find occurrences
" <Leader>b     Set, unset breakpoint (g:pymode_breakpoint enabled)
" [[            Jump on previous class or function (normal, visual, operator modes)
" ]]            Jump on next class or function (normal, visual, operator modes)
" [M            Jump on previous class or method (normal, visual, operator modes)
" ]M            Jump on next class or method (normal, visual, operator modes)

let g:pymode_rope = 0

" Documentation
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'

"Linting
let g:pymode_lint = 1
let g:pymode_lint_checker = "pyflakes,pep8"
" Auto check on save
let g:pymode_lint_write = 1

" Support virtualenv
let g:pymode_virtualenv = 1

" Enable breakpoints plugin
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_key = '<leader>b'

" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" Don't autofold code
let g:pymode_folding = 0


" ------------------------------------------------------------------------------
" Performance improvement: low hanging fruit
" ------------------------------------------------------------------------------

"Turn syntax highlighting on
syntax on
" set synmaxcol=200
